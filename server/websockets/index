#! usr/bin/env node

var model = require('../../database/models');
var admin = require("firebase-admin");


var private_key = process.env.FIREBASE_PRIVATE_KEY || null

if(private_key !== null)
admin.initializeApp({
    credential: admin.credential.cert({
        "private_key": private_key.replace(/\\n/g, '\n'),
        "client_email": process.env.FIREBASE_CLIENT_EMAIL,
        "project_id": process.env.FIREBASE_PROJECT_ID
    }),
    databaseURL: "https://mlvalles-741ec.firebaseio.com"
  });


/** Websockets */
function websockets(io){

    io.on('connection', socket => {
        console.log("attempt to connect");

        var id = socket.handshake.query['id'];
        
        socket.leave(socket.id);//leaving default room
        socket.join(id);//joining to custom room


        socket.on('message', function(data) {
            
            
            data.timestamp = new Date();
            if( data.from_device_id === undefined) {
                /**We don't want undefined value 'cause
                 * this can produce errors on android clients
                  */
                data.from_device_id = "";
            }


            saveMessage(socket, data);

            /**Setting sender and receiver socket */
            var senderClient = io.sockets.adapter.rooms[id];
            var receiverClient = io.sockets.adapter.rooms[data.to_id];

            /**Uncomment this to test sockets */
            //console.log('Sender client:', senderClient);
            //console.log('Receiver client:', receiverClient);

            /** if the client is not connected */
            if( receiverClient === undefined ){
                console.log('Websockets:', 'Receiver not connected');
                
                /** If receiver is not connected socketio cannot send the message
                 *  so we make it through FCM
                 */

                if( data.to_device_id !== undefined && data.to_device_id !== "" && private_key !== null)
                    sendFCMMessage(data.to_device_id, data.sender_name);

            } else {

                //private message to data.to_id socket
                io.to(data.to_id).emit('message', data);

            }

            /**This notify to sender that the message has been sent */
            data.sent = true
            socket.emit('message', data);

        });
        
    });

}

function saveMessage(socket, data){
    var message = new model.Message(data);
    message.save((err, doc) => {
        if (err) {
            socket.emit('error','mensaje no guardado');
            console.log('[ERROR]Websockets/index: El mensaje no se guardo_');
        } else {
            console.log('Websockets/index: El mensaje se guardO correctamente', doc);
        }
    });

}

function sendFCMMessage(registrationToken, sender){
    var message = {
        data: {
          name: sender,
          message: 'You have a new message'
        },
        token: registrationToken
      };
      
      // Send a message to the device corresponding to the provided
      // registration token.
      admin.messaging().send(message)
        .then((response) => {
          // Response is a message ID string.
          console.log('Successfully sent message:', response);
        })
        .catch((error) => {
          console.log('Error sending message:', error);
        });
      
}

module.exports = websockets;
