#! usr/bin/env node

var model = require('../../database/models');
var admin = require("firebase-admin");

//var serviceAccount = process.env.GOOGLE_APPLICATION_CREDENTIALS || require("../keys/mlvalles-key.json");

//console.log('key', serviceAccount);
var private_key = process.env.FIREBASE_PRIVATE_KEY || null

if(private_key !== null)
admin.initializeApp({
    credential: admin.credential.cert({
        "private_key": private_key.replace(/\\n/g, '\n'),
        "client_email": process.env.FIREBASE_CLIENT_EMAIL,
        "project_id": process.env.FIREBASE_PROJECT_ID
    }),
    databaseURL: "https://mlvalles-741ec.firebaseio.com"
  });

/** Websockets */
function websockets(io){

    io.on('connection', socket => {

        var id = socket.handshake.query['id'];
        //console.log('user_id', id)
        
        socket.leave(socket.id);//leaving default room
        socket.join(id);//joining to custom room
        
        //console.log('Websockets:', 'connected');

        socket.on('message', function(data) {
            
            //console.log('websockets', data);
            data.timestamp = new Date();
            if( data.from_device_id === undefined) data.from_device_id = ""

            var message = new model.Message(data);
            setMessage(socket, message);

            var senderClient = io.sockets.adapter.rooms[id];
            var receiverClient = io.sockets.adapter.rooms[data.to_id];

            console.log('Sender client:', senderClient);
            console.log('Receiver client:', receiverClient);//Querying clients in a given room

            /** if the client is not connected */
            if( receiverClient === undefined ){
                console.log('Websockets:', 'Receiver not connected');
                
                /** Send a message to the sender notifying that receiver is not connected */
                //socket.emit('receiverNotConnected', {'to_id': data.to_id, 'sender_name': data.sender_name, 'product_id': data.product_id })

                //var registrationToken = 'craSzMH-4Ew:APA91bFBunT61dykQ4RnsTDy-kSvspdSl1PpJFWogslmj4R9wVDfG9QLdFdTZmNf_VTELatUUmCEv92p2nATpUPqH9JCxa9qxr5CjUNy7V6w1ZNNcBWR3ddvkAjv-x-m4MqioZXvyYAT';
                if( data.to_device_id !== undefined && data.to_device_id !== "" && private_key !== null)
                    sendFCMMessage(data.to_device_id, data.sender_name);

            } else {

                //private message to data.to_id socket
                io.to(data.to_id).emit('message', data);

            }

            //sending to sender
            data.sent = true
            socket.emit('message', data);

        });
        
    });

}

function setMessage(socket, message){
    message.save((err, doc) => {
        if (err) {
            socket.emit('error','mensaje no guardado');
        } else {
            console.log('Websockets/index: El mensaje se guardO correctamente', doc);
        }
    });

}

function sendFCMMessage(registrationToken, sender){
    var message = {
        data: {
          name: sender,
          message: 'test message body'
        },
        token: registrationToken
      };
      
      // Send a message to the device corresponding to the provided
      // registration token.
      admin.messaging().send(message)
        .then((response) => {
          // Response is a message ID string.
          console.log('Successfully sent message:', response);
        })
        .catch((error) => {
          console.log('Error sending message:', error);
        });
      
}

module.exports = websockets;